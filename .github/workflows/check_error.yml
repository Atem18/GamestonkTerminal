name: Tests
env:
  PIP_DEFAULT_TIMEOUT: 100
  GTFF_USE_PROMPT_TOOLKIT: false
  GTFF_USE_ION: false
  GTFF_ENABLE_QUICK_EXIT: true
  PYTHONNOUSERSITE: 1
on: [pull_request, push]
jobs:
  tests-conda:
    name: Anaconda Python Tests - (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: ['windows']
        python-version: ['3.8']
        dependencies: ['']
        include:
          - os: windows
            python: 3.8
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python }}
      PYTHONNOUSERSITE: 1
    steps:
      - name: Set git to use LF
        if: runner.os == 'Windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch more than the last commit so that setuptools-scm can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version still be wrong.
          # Increase if necessary.
          fetch-depth: 100
          # The GitHub token is preserved by default but this job doesn't need
          # to be able to push to GitHub.
          persist-credentials: false

      - name: Setup caching for conda packages
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('build/conda/conda-3-8-env.yaml') }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python }}
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge,defaults
          show-channel-urls: true
          channel-priority: flexible
          environment-file: build/conda/conda-3-8-env.yaml
          activate-environment: testing
          # Needed for caching
          use-only-tar-bz2: true

      - name: Update Temp permissions on windows
        if: runner.os == 'Windows'
        shell: cmd /C CALL {0}
        run: >-
          c:\windows\system32\icacls C:\Users\runneradmin\AppData\Local\Temp /grant "everyone":F /t

      - name: Get pip cache dir
        shell: bash -l {0}
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-3-8-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (Bash)
        shell: bash -l {0}
        run: |
          pip install --requirement requirements-full.txt

      - name: List installed packages (Bash)
        shell: bash -l {0}
        run: |
          conda list
          pip list

      # - name: Run linter (Bash)
      #   shell: bash -l {0}
      #   run: |
      #     pip install pylint==2.11.1
      #     pylint discordbot gamestonk_terminal terminal.py tests

      # - name: Run MyPy (Bash)
      #   if: runner.os != 'Windows'
      #   shell: bash -l {0}
      #   run: mypy --ignore-missing-imports --exclude '/setup\.py$' .

      - name: Run tests (Bash)
        shell: bash -l {0}
        run: pytest tests/

      - name: Start Terminal and exit
        shell: bash -l {0}
        run: python terminal.py
